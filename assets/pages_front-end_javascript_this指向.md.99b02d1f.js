import{_ as s,c as n,o as a,Q as l}from"./chunks/framework.9fd5685d.js";const b=JSON.parse('{"title":"this指向","description":"","frontmatter":{},"headers":[],"relativePath":"pages/front-end/javascript/this指向.md","filePath":"pages/front-end/javascript/this指向.md"}'),p={name:"pages/front-end/javascript/this指向.md"},o=l(`<h1 id="this指向" tabindex="-1">this指向 <a class="header-anchor" href="#this指向" aria-label="Permalink to &quot;this指向&quot;">​</a></h1><p>在标准函数中，this 引用的是把函数当成方法调用的上下文对象，这时候通常称其为 this 值 在JavaScript中，this关键字的指向是<strong>动态</strong>的，<strong>取决于函数的调用方式</strong>。</p><table><thead><tr><th>调用方式</th><th>示例</th><th>函数中的this指向</th></tr></thead><tbody><tr><td>通过<code>new</code>调用</td><td><code>new method()</code></td><td>新对象</td></tr><tr><td>直接调用</td><td><code>method()</code></td><td>全局对象(浏览器就是window ，node环境就是 global)</td></tr><tr><td>通过对象调用</td><td><code>obj.method()</code></td><td>前面的对象</td></tr><tr><td>call、apply、bind</td><td><code>method.call(ctx)</code></td><td>第一个参数</td></tr></tbody></table><p><strong>需要注意的是，箭头函数没有自己的this，箭头函数内部的this是继承自外部作用域的。</strong></p><h2 id="通过new调用" tabindex="-1">通过new调用 <a class="header-anchor" href="#通过new调用" aria-label="Permalink to &quot;通过new调用&quot;">​</a></h2><p>当一个函数被作为构造函数使用，通过new关键字调用时，函数内部的this指向新创建的对象。例如：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Person</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> name;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> john </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Person</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;John&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(john.name); </span><span style="color:#6A737D;">// 输出 &quot;John&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;">(</span><span style="color:#E36209;">name</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> name;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> john </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;John&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(john.name); </span><span style="color:#6A737D;">// 输出 &quot;John&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="直接调用" tabindex="-1">直接调用 <a class="header-anchor" href="#直接调用" aria-label="Permalink to &quot;直接调用&quot;">​</a></h2><p>当一个函数直接被调用（即不通过对象或new关键字），this通常指向全局对象。在浏览器中，全局对象是window，在Node.js中，全局对象是global。例如</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">window.color </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;red&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">showThis</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> color </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;blue&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.color);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#B392F0;">showThis</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// red</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">window.color </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;red&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">showThis</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> color </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;blue&#39;</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.color);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">showThis</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// red</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="通过对象调用" tabindex="-1">通过对象调用 <a class="header-anchor" href="#通过对象调用" aria-label="Permalink to &quot;通过对象调用&quot;">​</a></h2><p>当一个函数作为对象的方法被调用时，this指向调用该方法的对象。例如：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> obj </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  name: </span><span style="color:#9ECBFF;">&#39;John&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">showThis</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">showThis2</span><span style="color:#E1E4E8;">: ()</span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#E1E4E8;">obj.</span><span style="color:#B392F0;">showThis</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 输出 {name: &quot;John&quot;, showThis: ƒ} 在这个例子中，this指向obj。</span></span>
<span class="line"><span style="color:#E1E4E8;">obj.</span><span style="color:#B392F0;">showThis2</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 在浏览器中输出 Window {...}，在Node.js中输出 global {...}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> obj </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  name: </span><span style="color:#032F62;">&#39;John&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">showThis</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">showThis2</span><span style="color:#24292E;">: ()</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#24292E;">obj.</span><span style="color:#6F42C1;">showThis</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 输出 {name: &quot;John&quot;, showThis: ƒ} 在这个例子中，this指向obj。</span></span>
<span class="line"><span style="color:#24292E;">obj.</span><span style="color:#6F42C1;">showThis2</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 在浏览器中输出 Window {...}，在Node.js中输出 global {...}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="call、apply、bind调用" tabindex="-1">call、apply、bind调用 <a class="header-anchor" href="#call、apply、bind调用" aria-label="Permalink to &quot;call、apply、bind调用&quot;">​</a></h2><p>这些方法都可以改变函数内部this的指向。call和apply会立即执行函数，而bind会返回一个新的函数，等待调用。这三个方法的第一个参数都是要绑定的this。例如：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">window.color </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;red&#39;</span><span style="color:#E1E4E8;">; </span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> o </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { </span></span>
<span class="line"><span style="color:#E1E4E8;"> color: </span><span style="color:#9ECBFF;">&#39;blue&#39;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">}; </span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">sayColor</span><span style="color:#E1E4E8;">() { </span></span>
<span class="line"><span style="color:#E1E4E8;"> console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.color); </span></span>
<span class="line"><span style="color:#E1E4E8;">} </span></span>
<span class="line"><span style="color:#B392F0;">sayColor</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// red </span></span>
<span class="line"><span style="color:#E1E4E8;">sayColor.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// red </span></span>
<span class="line"><span style="color:#E1E4E8;">sayColor.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(window); </span><span style="color:#6A737D;">// red </span></span>
<span class="line"><span style="color:#E1E4E8;">sayColor.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(o); </span><span style="color:#6A737D;">// blue </span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> objectSayColor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sayColor.</span><span style="color:#B392F0;">bind</span><span style="color:#E1E4E8;">(o); </span></span>
<span class="line"><span style="color:#B392F0;">objectSayColor</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// blue</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">window.color </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;red&#39;</span><span style="color:#24292E;">; </span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> o </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { </span></span>
<span class="line"><span style="color:#24292E;"> color: </span><span style="color:#032F62;">&#39;blue&#39;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">}; </span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sayColor</span><span style="color:#24292E;">() { </span></span>
<span class="line"><span style="color:#24292E;"> console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.color); </span></span>
<span class="line"><span style="color:#24292E;">} </span></span>
<span class="line"><span style="color:#6F42C1;">sayColor</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// red </span></span>
<span class="line"><span style="color:#24292E;">sayColor.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// red </span></span>
<span class="line"><span style="color:#24292E;">sayColor.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(window); </span><span style="color:#6A737D;">// red </span></span>
<span class="line"><span style="color:#24292E;">sayColor.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(o); </span><span style="color:#6A737D;">// blue </span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> objectSayColor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sayColor.</span><span style="color:#6F42C1;">bind</span><span style="color:#24292E;">(o); </span></span>
<span class="line"><span style="color:#6F42C1;">objectSayColor</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// blue</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div>`,16),e=[o];function c(t,r,E,y,i,d){return a(),n("div",null,e)}const u=s(p,[["render",c]]);export{b as __pageData,u as default};
