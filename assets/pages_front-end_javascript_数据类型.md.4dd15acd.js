import{_ as e,c as o,o as t,Q as a}from"./chunks/framework.9fd5685d.js";const q=JSON.parse('{"title":"数据类型","description":"","frontmatter":{},"headers":[],"relativePath":"pages/front-end/javascript/数据类型.md","filePath":"pages/front-end/javascript/数据类型.md"}'),c={name:"pages/front-end/javascript/数据类型.md"},n=a('<h1 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-label="Permalink to &quot;数据类型&quot;">​</a></h1><p>ECMAScript 有 6 种简单数据类型（也称为原始类型） <code>Undefined</code>、<code>Null</code>、<code>Boolean</code>、<code>Number</code>、<code>String</code> 、 <code>Symbol</code>(ES6新增) 还有一种复杂数据类型叫 <code>Object</code>（对象）。Object 是一种无序名值对的集合。</p><p>所有值都可以用上述 7 种数据类型之一来表示</p><h2 id="typeof-操作符" tabindex="-1">typeof 操作符 <a class="header-anchor" href="#typeof-操作符" aria-label="Permalink to &quot;typeof 操作符&quot;">​</a></h2><p>typeof 操作符用来确定任意变量的数据类型 typeof 操作符会返回下列字符串值之一： &quot;undefined&quot;表示值未定义； &quot;boolean&quot;表示值为布尔值； &quot;string&quot;表示值为字符串； &quot;number&quot;表示值为数值； &quot;object&quot;**表示值为对象（而不是函数）**或 <code>null</code>； &quot;function&quot;表示值为函数； “symbol&quot;表示值为符号。</p><p>调用typeof null 返回的是&quot;object&quot;。这是因为特殊值 null 被认为是一个对空对象的引用。</p>',6),d=[n];function r(p,s,u,_,i,l){return t(),o("div",null,d)}const h=e(c,[["render",r]]);export{q as __pageData,h as default};
